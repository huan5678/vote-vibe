generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique @db.VarChar(100)
  password      String
  name          String         @db.VarChar(50)
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  comments      Comment[]
  credentials   Credential?
  notifications Notification[]
  polls         Poll[]
  detail        User_Detail?
  votes         Vote[]
}

model User_Detail {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  avatar_url String?
  full_name  String?
  gender     Gender?
  birthday   DateTime?
  address    Json?
  phone      String?
  updatedAt  DateTime  @default(now()) @updatedAt
  userId     String    @unique @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credential {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @unique @db.Uuid
  name       String?
  externalId String   @unique
  publicKey  Bytes    @unique
  signCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Poll {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  options     Json
  categoryId  String
  createdById String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  startedAt   DateTime?
  Comment     Comment[]
  Category    Category  @relation(fields: [categoryId], references: [id])
  createdBy   User      @relation(fields: [createdById], references: [id])
  votes       Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  pollId    String   @db.Uuid
  userId    String   @db.Uuid
  option    Int
  updatedAt DateTime @default(now()) @updatedAt
  poll      Poll     @relation(fields: [pollId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pollId    String   @db.Uuid
  userId    String   @db.Uuid
  Poll      Poll     @relation(fields: [pollId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id
  name      String
  updatedAt DateTime @default(now())
  Poll      Poll[]
}

enum Role {
  USER
  ADMIN
}

enum TimeUnit {
  Y
  M
  D
  W
  H
  m
  s
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
